//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class CSLQuiescingDisplayLink;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))> {
    struct function<void (double, double)> tick;
    struct function<bool ()> canQueiesce;
    struct function<void (bool)> queiescentChanged;
    CSLQuiescingDisplayLink *_displayLink;
    double _lastUpdateTime;
    CDUnknownBlockType _currentValue___targetValue___epsilon___outputBlock;
    double _lastUpdateTime;
    struct vector<CSL::AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))>::Animation, std::__1::allocator<CSL::AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))>::Animation>> _activeAnimations;
};

struct AdditiveDynamicValue<float> {
    struct function<void (double, double)> tick;
    struct function<bool ()> canQueiesce;
    struct function<void (bool)> queiescentChanged;
    CSLQuiescingDisplayLink *_displayLink;
    double _lastUpdateTime;
    float _currentValue;
    float _targetValue;
    float _epsilon;
    CDUnknownBlockType _outputBlock;
    double _lastUpdateTime;
    struct vector<CSL::AdditiveDynamicValue<float>::Animation, std::__1::allocator<CSL::AdditiveDynamicValue<float>::Animation>> _activeAnimations;
};

struct Animation;

struct CGAffineTransform {
    float a;
    float b;
    float c;
    float d;
    float tx;
    float ty;
};

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct Hex {
    int q;
    int r;
};

struct InertialDynamicValue<float> {
    struct function<void (double, double)> tick;
    struct function<bool ()> canQueiesce;
    struct function<void (bool)> queiescentChanged;
    CSLQuiescingDisplayLink *_displayLink;
    double _lastUpdateTime;
    float _currentValue;
    float _targetValue;
    float _epsilon;
    CDUnknownBlockType _outputBlock;
    double _lastUpdateTime;
    _Bool _animating;
    float _intermediateValue;
    CDUnknownBlockType _constraintBlock;
    CDUnknownBlockType _completionBlock;
    float _decelerationConstant;
    float _bounceConstant;
};

struct UIEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct __hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>> {
    struct __hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> {
        struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *_field1;
    } _field1;
};

struct __hash_node<CSL::Hex, void *>;

struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>;

struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>;

struct __hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>;

struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct unique_ptr<std::__1::__hash_node<CSL::Hex, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>*>>> __bucket_list_;
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>>> {
        struct __hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*> {
            struct __hash_node<CSL::Hex, void *> *__next_;
        } __first_;
    } __p1_;
    struct __compressed_pair<unsigned long, std::__1::hash<CSL::Hex>> {
        unsigned long __first_;
    } __p2_;
    struct __compressed_pair<float, std::__1::equal_to<CSL::Hex>> {
        float __first_;
    } __p3_;
};

struct _opaque_pthread_mutex_t {
    long __sig;
    char __opaque[40];
};

struct deque<CSLPressState, std::__1::allocator<CSLPressState>> {
    struct __split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *>> {
        CDStruct_183601bc **__first_;
        CDStruct_183601bc **__begin_;
        CDStruct_183601bc **__end_;
        struct __compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *>> {
            CDStruct_183601bc **__first_;
        } __end_cap_;
    } __map_;
    unsigned int __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CSLPressState>> {
        unsigned long __first_;
    } __size_;
};

struct function<bool ()> {
    struct type __buf_;
    struct __base<bool ()> *__f_;
};

struct function<void (bool)> {
    struct type __buf_;
    struct __base<void (bool)> *__f_;
};

struct function<void (double, double)> {
    struct type __buf_;
    struct __base<void (double, double)> *__f_;
};

struct in_addr {
    unsigned int _field1;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct type {
    unsigned char __lx[12];
};

struct unique_ptr<std::__1::__hash_node<CSL::Hex, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<CSL::Hex, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>*>>> {
        struct __hash_node<CSL::Hex, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained>>> {
    struct __hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<CSL::Hex, CSLHexLayoutAttributes, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexLayoutAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::hash<CSL::Hex>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::equal_to<CSL::Hex>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<CSL::Hex, int, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, int>>> {
    struct __hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> __table_;
};

struct unordered_set<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> _field1;
};

struct vector<CSL::AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))>::Animation, std::__1::allocator<CSL::AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))>::Animation>> {
    struct Animation *__begin_;
    struct Animation *__end_;
    struct __compressed_pair<CSL::AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))>::Animation *, std::__1::allocator<CSL::AdditiveDynamicValue<float __attribute__((ext_vector_type(2)))>::Animation>> {
        struct Animation *__first_;
    } __end_cap_;
};

struct vector<CSL::AdditiveDynamicValue<float>::Animation, std::__1::allocator<CSL::AdditiveDynamicValue<float>::Animation>> {
    struct Animation *__begin_;
    struct Animation *__end_;
    struct __compressed_pair<CSL::AdditiveDynamicValue<float>::Animation *, std::__1::allocator<CSL::AdditiveDynamicValue<float>::Animation>> {
        struct Animation *__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDStruct_11f37819;

typedef struct {
    _Bool itemIsEnabled[32];
    char timeString[64];
    int gsmSignalStrengthRaw;
    int gsmSignalStrengthBars;
    char serviceString[100];
    char serviceCrossfadeString[100];
    char serviceImages[2][100];
    char operatorDirectory[1024];
    unsigned int serviceContentType;
    int wifiSignalStrengthRaw;
    int wifiSignalStrengthBars;
    unsigned int dataNetworkType;
    int batteryCapacity;
    unsigned int batteryState;
    char batteryDetailString[150];
    int bluetoothBatteryCapacity;
    int thermalColor;
    unsigned int thermalSunlightMode:1;
    unsigned int slowActivity:1;
    unsigned int syncActivity:1;
    char activityDisplayId[256];
    unsigned int bluetoothConnected:1;
    unsigned int displayRawGSMSignal:1;
    unsigned int displayRawWifiSignal:1;
    unsigned int locationIconType:1;
    unsigned int quietModeInactive:1;
    unsigned int tetheringConnectionCount;
    unsigned int batterySaverModeActive:1;
    unsigned int deviceIsRTL:1;
    unsigned int lock:1;
    char breadcrumbTitle[256];
    char breadcrumbSecondaryTitle[256];
    char personName[100];
    char returnToAppBundleIdentifier[100];
    unsigned int electronicTollCollectionAvailable:1;
    unsigned int wifiLinkWarning:1;
} CDStruct_5e10f1a5;

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    float _float3__percentComplete;
} CDStruct_727cf631;

typedef struct CDStruct_183601bc;

typedef struct {
    double _field1;
    struct Hex _field2;
    _Bool _field3;
    double _field4;
    CDStruct_727cf631 _field5;
} CDStruct_31feac45;

// Template types
typedef struct __hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>> {
    struct __hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> {
        struct __hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *_field1;
    } _field1;
} __hash_map_const_iterator_f7e24c6d;

typedef struct unordered_set<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> _field1;
} unordered_set_02834b46;

